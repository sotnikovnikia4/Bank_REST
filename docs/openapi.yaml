openapi: 3.0.3
info:
  title: Bank Cards API
  version: v2.2.0 # Обновленная версия с учетом последних изменений SecurityConfig
  description: API для управления банковскими картами и учетными записями пользователей, с учетом правил безопасности.
servers:
  - url: http://localhost:8080/api
    description: Локальный сервер разработки

components:
  schemas:
    UUID:
      type: string
      format: uuid
      example: "a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"

    ExceptionMessage:
      type: object
      properties:
        status:
          type: integer
          description: HTTP статус код ошибки.
        message:
          type: string
          description: Сообщение об ошибке.
        timestamp:
          type: string
          format: date-time
          description: Временная метка возникновения ошибки.
      required:
        - status
        - message
        - timestamp

    AuthenticationDTO:
      type: object
      properties:
        login:
          type: string
          minLength: 3
          maxLength: 255
          description: "Логин пользователя."
        password:
          type: string
          description: "Пароль пользователя."
      required:
        - login
        - password

    BlockRequestDTO:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        cardId:
          $ref: '#/components/schemas/UUID'
      # В вашем DTO поля не помечены как required, но обычно id генерируется сервером, а cardId нужен для создания.
      # Уточните required поля, если необходимо.

    CardDTO:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        expiresAt:
          type: string
          format: date
          description: "Дата окончания срока действия карты."
        status:
          type: string
          description: "Статус карты (например, ACTIVE, BLOCKED)."
        balance:
          type: number
          format: double # Для BigDecimal
          description: "Баланс карты."
        cardNumber:
          type: string
          description: "Номер карты."
        ownerId:
          $ref: '#/components/schemas/UUID'
      # required поля здесь кажутся корректными для ответа

    CreationCardDTO:
      type: object
      properties:
        expiresAt:
          type: string
          format: date
          description: "Дата окончания срока действия карты."
        ownerId:
          $ref: '#/components/schemas/UUID'
          description: "ID владельца карты."
      required:
        - expiresAt
        - ownerId

    CreationUserDTO:
      type: object
      properties:
        role:
          type: string
          description: "Роль нового пользователя."
        login:
          type: string
          minLength: 3
          maxLength: 255
          description: "Логин нового пользователя."
        password:
          type: string
          description: "Пароль нового пользователя."
        name:
          type: string
          minLength: 2
          maxLength: 255
          description: "Имя нового пользователя."
      required:
        - role
        - login
        - password
        - name

    PageDTO_UserDTO:
      type: object
      properties:
        pageNumber:
          type: integer
          description: "Номер текущей страницы."
        pageSize:
          type: integer
          description: "Количество элементов на странице."
        totalPages:
          type: integer
          format: int64
          description: "Общее количество страниц."
        totalElements:
          type: integer
          format: int64
          description: "Общее количество элементов."
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserDTO'
      required:
        - pageNumber
        - pageSize
        - totalPages
        - totalElements
        - data

    PageDTO_CardDTO:
      type: object
      properties:
        pageNumber:
          type: integer
        pageSize:
          type: integer
        totalPages:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        data:
          type: array
          items:
            $ref: '#/components/schemas/CardDTO'
      required:
        - pageNumber
        - pageSize
        - totalPages
        - totalElements
        - data

    PageDTO_BlockRequestDTO:
      type: object
      properties:
        pageNumber:
          type: integer
        pageSize:
          type: integer
        totalPages:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        data:
          type: array
          items:
            $ref: '#/components/schemas/BlockRequestDTO'
      required:
        - pageNumber
        - pageSize
        - totalPages
        - totalElements
        - data

    TokenDTO:
      type: object
      properties:
        token:
          type: string
          description: "JWT токен доступа."
      required:
        - token

    TransferDTO:
      type: object
      properties:
        fromCardId:
          $ref: '#/components/schemas/UUID'
          description: "ID карты, с которой осуществляется перевод."
        toCardId:
          $ref: '#/components/schemas/UUID'
          description: "ID карты, на которую осуществляется перевод."
        amount:
          type: number
          format: double # Для BigDecimal
          minimum: 0.01
          description: "Сумма перевода."
      required:
        - fromCardId
        - toCardId
        - amount

    UpdatingUserDTO:
      type: object
      properties:
        role:
          type: string
          description: "Новая роль пользователя (опционально)."
        login:
          type: string
          description: "Новый логин пользователя (опционально)."
        password:
          type: string
          description: "Новый пароль пользователя (опционально)."
        name:
          type: string
          description: "Новое имя пользователя (опционально)."

    UserDTO:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        role:
          type: string
          description: "Роль пользователя."
        login:
          type: string
          description: "Логин пользователя."
        name:
          type: string
          description: "Имя пользователя."
      # required поля здесь кажутся корректными для ответа

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Error400:
      description: "Bad Request (Ошибка валидации, некорректный запрос, отсутствует параметр, несоответствие типа, ошибка верификации JWT)"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExceptionMessage'
    Error401:
      description: "Unauthorized (Неверные учетные данные, ошибка сервиса аутентификации, пользователь не найден, требуется аутентификация)"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExceptionMessage'
    Error403:
      description: "Forbidden (Доступ запрещен)"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExceptionMessage'

paths:
  /auth/registration:
    post:
      tags:
        - Auth Controller
      summary: Зарегистрировать нового пользователя (Требуется роль ADMIN)
      operationId: registerUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreationUserDTO'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /auth/login:
    post:
      tags:
        - Auth Controller
      summary: Аутентифицировать пользователя и получить токен (Публичный)
      operationId: loginUser
      # No security section - permitAll
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationDTO'
      responses:
        '200':
          description: Аутентификация успешна
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'

  /users/me/transfer:
    post:
      tags:
        - User Controller
      summary: Перевести средства между картами пользователя (Требуется роль USER)
      operationId: transferFunds
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferDTO'
      responses:
        '200':
          description: Перевод успешен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /users:
    get:
      tags:
        - User Controller
      summary: Получить постраничный список пользователей (Требуется роль ADMIN)
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: pageNumber
          in: query
          required: true
          schema:
            type: integer
          description: "Номер страницы."
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: "Количество пользователей на странице."
        - name: name
          in: query
          required: false
          schema:
            type: string
          description: "Фильтр по имени пользователя(Ищется частичное совпадение с представленным значением, регистр важен)."
        - name: role
          in: query
          required: false
          schema:
            type: string
          description: "Фильтр по роли пользователя."
        - name: login
          in: query
          required: false
          schema:
            type: string
          description: "Фильтр по логину пользователя."
      responses:
        '200':
          description: Список пользователей успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDTO_UserDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /users/{id}:
    get:
      tags:
        - User Controller
      summary: Получить пользователя по ID (Требуется роль ADMIN)
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Пользователь успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
    put:
      tags:
        - User Controller
      summary: Обновить пользователя по ID (Требуется роль ADMIN)
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatingUserDTO'
      responses:
        '200':
          description: Пользователь успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
    delete:
      tags:
        - User Controller
      summary: Удалить пользователя по ID (Требуется роль ADMIN)
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          description: Пользователь успешно удален
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /users/me:
    get:
      tags:
        - User Controller
      summary: Получить информацию о текущем пользователе (Требуется роль USER)
      operationId: getCurrentUserInfo
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Информация о текущем пользователе успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /users/me/cards:
    get:
      tags:
        - User Controller
      summary: Получить карты текущего пользователя (Требуется роль USER)
      operationId: getCurrentUserCards
      security:
        - bearerAuth: []
      parameters:
        - name: pageNumber
          in: query
          required: true
          schema:
            type: integer
          description: "Номер страницы (Нумерация с 0)."
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
          description: "Размер страницы (Должен быть больше 0)."
        - name: status
          in: query
          required: false
          schema:
            type: string
          description: "Фильтр по статусу карты."
        - name: expireBefore
          in: query
          required: false
          schema:
            type: string
            format: date
          description: "Карты, истекающие до указанной даты."
        - name: expireAfter
          in: query
          required: false
          schema:
            type: string
            format: date
          description: "Карты, истекающие после указанной даты."
        - name: balanceMin
          in: query
          required: false
          schema:
            type: number
            format: double
          description: "Минимальный баланс карты."
        - name: balanceMax
          in: query
          required: false
          schema:
            type: number
            format: double
          description: "Максимальный баланс карты."
      responses:
        '200':
          description: Карты пользователя успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDTO_CardDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /users/me/cards/{cardId}:
    get:
      tags:
        - User Controller
      summary: Получить конкретную карту текущего пользователя (Требуется роль USER)
      operationId: getCurrentUserCardById
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Карта успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /users/me/cards/{id}/block-request:
    post:
      tags:
        - User Controller
      summary: Создать запрос на блокировку карты пользователя (Требуется роль USER)
      operationId: createBlockRequestForCard
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID карты для запроса на блокировку"
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '201':
          description: Запрос на блокировку успешно создан
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /users/block-requests:
    get:
      tags:
        - User Controller
      summary: Получить все запросы на блокировку (Требуется роль ADMIN)
      operationId: getAllBlockRequests
      security:
        - bearerAuth: []
      parameters:
        - name: pageNumber
          in: query
          required: true
          schema:
            type: integer
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Запросы на блокировку успешно получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDTO_BlockRequestDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /users/block-requests/{id}:
    get:
      tags:
        - User Controller
      summary: Получить конкретный запрос на блокировку по ID (Требуется роль ADMIN)
      operationId: getBlockRequestById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID запроса на блокировку"
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Запрос на блокировку успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockRequestDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
    delete:
      tags:
        - User Controller
      summary: Закрыть запрос на блокировку (Требуется роль ADMIN)
      operationId: closeBlockRequest
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: "ID запроса на блокировку для закрытия"
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '204':
          description: Запрос на блокировку успешно закрыт
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /cards:
    post:
      tags:
        - Card Controller
      summary: Создать новую карту (Требуется роль ADMIN)
      operationId: createCard
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreationCardDTO'
      responses:
        '201':
          description: Карта успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
    get:
      tags:
        - Card Controller
      summary: Получить все карты (Требуется роль ADMIN)
      operationId: getAllCards
      security:
        - bearerAuth: []
      parameters:
        - name: pageNumber
          in: query
          required: true
          schema:
            type: integer
          description: "Номер страницы(нумерация начинается с 0)."
        - name: pageSize
          in: query
          required: true
          schema:
            type: integer
          description: "Размер страницы(Должен быть больше 0)."
        - name: ownerName
          in: query
          required: false
          schema:
            type: string
          description: "Фильтр по имени владельца карты(Ищется частичное совпадение, регистр важен)."
        - name: status
          in: query
          required: false
          schema:
            type: string
          description: "Фильтр по статусу карты."
        - name: expireBefore
          in: query
          required: false
          schema:
            type: string
            format: date
          description: "Карты, истекающие до указанной даты."
        - name: expireAfter
          in: query
          required: false
          schema:
            type: string
            format: date
          description: "Карты, истекающие после указанной даты."
        - name: balanceMin
          in: query
          required: false
          schema:
            type: number
            format: double
          description: "Минимальный баланс карты."
        - name: balanceMax
          in: query
          required: false
          schema:
            type: number
            format: double
          description: "Максимальный баланс карты."
      responses:
        '200':
          description: Список карт успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDTO_CardDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /cards/{id}:
    get:
      tags:
        - Card Controller
      summary: Получить карту по ID (Требуется роль ADMIN)
      operationId: getCardByIdAdmin
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
          description: "id карты"
      responses:
        '200':
          description: Карта успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
    delete:
      tags:
        - Card Controller
      summary: Удалить карту по ID (Требуется роль ADMIN)
      operationId: deleteCardById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
          description: "id удаляемой карты"
      responses:
        '204':
          description: Карта успешно удалена
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /cards/{cardId}/activate:
    patch:
      tags:
        - Card Controller
      summary: Активировать карту (Требуется роль ADMIN)
      operationId: activateCard
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Карта успешно активирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /cards/{cardId}/block:
    patch:
      tags:
        - Card Controller
      summary: Заблокировать карту (Требуется роль ADMIN)
      operationId: blockCard
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: Карта успешно заблокирована
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'

  /cards/{cardId}/add-money:
    patch:
      tags:
        - Card Controller
      summary: Пополнить баланс карты (Требуется роль ADMIN)
      operationId: addMoneyToCard
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
        - name: amount
          in: query
          required: true
          schema:
            type: number
            format: double
            description: "Сумма для пополнения."
      responses:
        '200':
          description: Баланс успешно пополнен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDTO'
        '400':
          $ref: '#/components/responses/Error400'
        '401':
          $ref: '#/components/responses/Error401'
        '403':
          $ref: '#/components/responses/Error403'
